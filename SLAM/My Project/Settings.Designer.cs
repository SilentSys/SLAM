// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:4.0.30319.42000
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace SLAM.My
{
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "14.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]
    internal sealed partial class MySettings : System.Configuration.ApplicationSettingsBase
    {
        private static MySettings defaultInstance = (MySettings)Synchronized(new MySettings());

        /* TODO ERROR: Skipped RegionDirectiveTrivia *//* TODO ERROR: Skipped IfDirectiveTrivia */
        private static bool addedHandler;
        private static object addedHandlerLockObject = new object();

        [DebuggerNonUserCode()]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]
        private static void AutoSaveSettings(object sender, EventArgs e)
        {
            if (MyProject.Application.SaveMySettingsOnExit)
            {
                MySettingsProperty.Settings.Save();
            }
        }
        /* TODO ERROR: Skipped EndIfDirectiveTrivia *//* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        public static MySettings Default
        {
            get
            {

                /* TODO ERROR: Skipped IfDirectiveTrivia */
                if (!addedHandler)
                {
                    lock (addedHandlerLockObject)
                    {
                        if (!addedHandler)
                        {
                            MyProject.Application.Shutdown += AutoSaveSettings;
                            addedHandler = true;
                        }
                    }
                }
                /* TODO ERROR: Skipped EndIfDirectiveTrivia */
                return defaultInstance;
            }
        }

        [System.Configuration.UserScopedSetting()]
        [DebuggerNonUserCode()]
        [System.Configuration.DefaultSettingValue("X")]
        public string PlayKey
        {
            get
            {
                return Conversions.ToString(this["PlayKey"]);
            }

            set
            {
                this["PlayKey"] = value;
            }
        }

        [System.Configuration.UserScopedSetting()]
        [DebuggerNonUserCode()]
        [System.Configuration.DefaultSettingValue("")]
        public string LastGame
        {
            get
            {
                return Conversions.ToString(this["LastGame"]);
            }

            set
            {
                this["LastGame"] = value;
            }
        }

        [System.Configuration.UserScopedSetting()]
        [DebuggerNonUserCode()]
        [System.Configuration.DefaultSettingValue("False")]
        public bool NoHint
        {
            get
            {
                return Conversions.ToBoolean(this["NoHint"]);
            }

            set
            {
                this["NoHint"] = value;
            }
        }

        [System.Configuration.UserScopedSetting()]
        [DebuggerNonUserCode()]
        [System.Configuration.DefaultSettingValue("True")]
        public bool UpdateCheck
        {
            get
            {
                return Conversions.ToBoolean(this["UpdateCheck"]);
            }

            set
            {
                this["UpdateCheck"] = value;
            }
        }

        [System.Configuration.UserScopedSetting()]
        [DebuggerNonUserCode()]
        [System.Configuration.DefaultSettingValue("True")]
        public bool LogError
        {
            get
            {
                return Conversions.ToBoolean(this["LogError"]);
            }

            set
            {
                this["LogError"] = value;
            }
        }

        [System.Configuration.UserScopedSetting()]
        [DebuggerNonUserCode()]
        [System.Configuration.DefaultSettingValue("False")]
        public bool StartEnabled
        {
            get
            {
                return Conversions.ToBoolean(this["StartEnabled"]);
            }

            set
            {
                this["StartEnabled"] = value;
            }
        }

        [System.Configuration.UserScopedSetting()]
        [DebuggerNonUserCode()]
        [System.Configuration.DefaultSettingValue("True")]
        public bool WriteTags
        {
            get
            {
                return Conversions.ToBoolean(this["WriteTags"]);
            }

            set
            {
                this["WriteTags"] = value;
            }
        }

        [System.Configuration.UserScopedSetting()]
        [DebuggerNonUserCode()]
        [System.Configuration.DefaultSettingValue("=")]
        public string RelayKey
        {
            get
            {
                return Conversions.ToString(this["RelayKey"]);
            }

            set
            {
                this["RelayKey"] = value;
            }
        }

        [System.Configuration.UserScopedSetting()]
        [DebuggerNonUserCode()]
        [System.Configuration.DefaultSettingValue("False")]
        public bool HoldToPlay
        {
            get
            {
                return Conversions.ToBoolean(this["HoldToPlay"]);
            }

            set
            {
                this["HoldToPlay"] = value;
            }
        }

        [System.Configuration.UserScopedSetting()]
        [DebuggerNonUserCode()]
        [System.Configuration.DefaultSettingValue("False")]
        public bool OverrideFolders
        {
            get
            {
                return Conversions.ToBoolean(this["OverrideFolders"]);
            }

            set
            {
                this["OverrideFolders"] = value;
            }
        }

        [System.Configuration.UserScopedSetting()]
        [DebuggerNonUserCode()]
        [System.Configuration.DefaultSettingValue(@"C:\Program Files (x86)\Steam\steamapps\")]
        public string steamapps
        {
            get
            {
                return Conversions.ToString(this["steamapps"]);
            }

            set
            {
                this["steamapps"] = value;
            }
        }

        [System.Configuration.UserScopedSetting()]
        [DebuggerNonUserCode()]
        [System.Configuration.DefaultSettingValue(@"C:\Program Files (x86)\Steam\userdata\")]
        public string userdata
        {
            get
            {
                return Conversions.ToString(this["userdata"]);
            }

            set
            {
                this["userdata"] = value;
            }
        }

        [System.Configuration.UserScopedSetting()]
        [DebuggerNonUserCode()]
        [System.Configuration.DefaultSettingValue("True")]
        public bool MinimizeToSysTray
        {
            get
            {
                return Conversions.ToBoolean(this["MinimizeToSysTray"]);
            }

            set
            {
                this["MinimizeToSysTray"] = value;
            }
        }

        [System.Configuration.UserScopedSetting()]
        [DebuggerNonUserCode()]
        [System.Configuration.DefaultSettingValue("False")]
        public bool StartMinimized
        {
            get
            {
                return Conversions.ToBoolean(this["StartMinimized"]);
            }

            set
            {
                this["StartMinimized"] = value;
            }
        }

        [System.Configuration.UserScopedSetting()]
        [DebuggerNonUserCode()]
        [System.Configuration.DefaultSettingValue("True")]
        public bool UseFFMPEG
        {
            get
            {
                return Conversions.ToBoolean(this["UseFFMPEG"]);
            }

            set
            {
                this["UseFFMPEG"] = value;
            }
        }
    }
}

namespace SLAM.My
{
    [HideModuleName()]
    [DebuggerNonUserCode()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    internal static class MySettingsProperty
    {
        [System.ComponentModel.Design.HelpKeyword("My.Settings")]
        internal static MySettings Settings
        {
            get
            {
                return MySettings.Default;
            }
        }
    }
}